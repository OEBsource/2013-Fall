citation(vegan)
citation("vegan")
require(abind); require(vegan)
citation(abind); citation(vegan)
citation(abind)
citation("abind")
citation("vegan")
require(reshape)
citation"reshape
citation("reshape")
citation("vegan")
citation("abind")
require(vegan)
?vegdist
citation()
?quantile
x<-c(0,1,2,3,4,5)
y<-c(2,3,4,5,6)
fit<-(x~y)
plot(x~y)
x<-c(1,2,3,4,5)
x<-c(1,2,3,4,5)#
y<-c(2,3,4,5,6)#
#
fit<-(x~y)#
#
plot(x~y)
fit<-(x,y)
plot(x,y)
abline(fit)
x<-c(1,2,3,4,5)#
y<-c(2,3,4,5,6)#
#
fit<-(y~x)#
#
plot(x,y)#
#
abline(fit)
x<-c(1,2,3,4,5)#
y<-c(2,3,4,5,6)#
#
fit<-(y~x)
plot(x,y)
abline(fit)
plot(y,x)
abline(fit)
x<-c(1,2,3,4,5)#
y<-c(2,3,4,5,6)#
#
fit<-(y~x)#
#
plot(x,y)#
#
abline(fit)
fit
fit<-lm(y~x)#
#
plot(x,y)#
#
abline(fit)
quantile(c(x,y), probs=c(0.025,0.0975))
lines(quantile(c(x,y), probs=c(0.025,0.0975)))
quantile(c(x,y), probs=c(0.025,0.975))
?predict
predict(fit)
x<-c(1,2,3,4,5)#
y<-c(3,6,8,9,10)#
#
fit<-lm(y~x)#
#
predict(fit)
predict(fit, interval='confidence')
poop<-predict(fit, interval='confidence')
plot(x,y)
lines(x,poop[,2])
plot(x,y, xlim=c(0,10), ylim=c(0,10))#
#
lines(x,poop[,2])
lines(x,poop[,3])
lines(x, poop[,1])
plot(x,y, xlim=c(0,10), ylim=c(0,10))#
#
lines(x,poop[,2], lty=2)#
lines(x,poop[,3], lty=2)#
lines(x, poop[,1])
x#
poop[,2]
str(poop[,2])
str[,x]
str(x)
x#
poop[,2][1]
poop[,2]
as.vector(poop[,2])
str(poop)
class(poop)
as.data.frame(poop)
class(poop)
poop1<-as.data.frame(poop)
class(poop1)
poop1
poop1$newcol<-x
poop1
require(gclus)#
require(vegan)
Teeth<-read.csv("~/Desktop/Teeth1.csv", header=T)#
Ktherium<-Teeth[Teeth$Species=="Keuhneotherium",]#
Mucodon<-Teeth[Teeth$Species=="Morganucodon",]
Ktherium
my.abs <-abs(cor(Ktherium[,4:11]))#
my.colors<-dmat.color(my.abs)#
cpairs(Ktherium[,3:11], panel.colors=my.colors, gap=.5)
cpairs(Ktherium[,4:11], panel.colors=my.colors, gap=.5)
plot(Ktherium[,4], Ktherium[,9])
Ktherium
Teeth<-read.csv("~/Desktop/Teeth1.csv", header=T)#
Ktherium<-Teeth[Teeth$Species=="Keuhneotherium",]#
Mucodon<-Teeth[Teeth$Species=="Morganucodon",]
my.abs <-abs(cor(Ktherium[,4:11]))#
my.colors<-dmat.color(my.abs)#
cpairs(Ktherium[,4:11], panel.colors=my.colors, gap=.5)
plot(Ktherium[,4], Ktherium[,9])
set.seed(101)
x <- 0:100#
y <- 2*x + rnorm(101, 0, 10)
plot(x, y)
mod1 <- lm(y ~ x)#
yHat <- fitted(mod1)
errors <- resid(mod1)
boot <- function(n = 10000){#
 b1 <- numeric(n)#
 b1[1] <- coef(mod1)[2]#
 for(i in 2:n){#
 residBoot <- sample(errors, replace=F)#
 yBoot <- yHat + residBoot#
 modBoot <- lm(yBoot ~ x)#
 b1[i] <- coef(modBoot)[2]#
 }#
 return(b1)#
}
system.time( bootB1 <- boot() )
yHat
errors
?lm.fit
boot <- function(n = 10000){#
 b1 <- numeric(n)#
 b1[1] <- coef(mod1)[2]#
 for(i in 2:n){#
 residBoot <- sample(errors, replace=F)#
 yBoot <- yHat + residBoot#
 modBoot <- lm.fit(yBoot ~ x)#
 b1[i] <- coef(modBoot)[2]#
 }#
 return(b1)#
}#
# Run the bootstrapping function#
system.time( bootB1 <- boot() )#
mean(bootB1)
boot <- function(n = 10000){#
 b1 <- numeric(n)#
 b1[1] <- coef(mod1)[2]#
 for(i in 2:n){#
 residBoot <- sample(errors, replace=F)#
 yBoot <- yHat + residBoot#
 modBoot <- lm(yBoot ~ x)#
 b1[i] <- coef(modBoot)[2]#
 }#
 return(b1)#
}#
# Run the bootstrapping function#
system.time( bootB1 <- boot() )#
mean(bootB1)
install.packages("surface")
require(surface)
data(surfaceDemo)
tree<-surfaceDemo$tree
dat<-surfaceDemo$sim$dat
tree<-nameNodes(tree)
olist<-convertTreeData(tree,dat)
otree<-olist[[1]]; odata<-olist[[2]]
fwd<-surfaceForward(otree, odata, aic_threshold = 0, exclude = 0, verbose = FALSE, plotaic = FALSE)
k<-length(fwd)
fsum<-surfaceSummary(fwd) ;names(fsum)
bwd<-surfaceBackward(otree, odata, starting_model = fwd[[k]], aic_threshold = 0, only_best = FALSE, verbose = FALSE, plotaic = FALSE) ; bsum<-surfaceSummary(bwd) ; kk<-length(bwd)
surfaceTreePlot(tree, bwd[[kk]], labelshifts = T)
par(mfrow=c(1,2), mai=c(0.8,0.8,0.2,0.2)) ; surfaceTraitPlot(dat, bwd[[kk]], whattraits = c(1,2)) ; surfaceTraitPlot(dat, bwd[[kk]], whattraits = c(3,2))
surfaceTreePlot(tree, bwd[[kk]], labelshifts = F)
dat
olist
otree
montecarloPi <- function(trials) {#
  count = 0#
  for(i in 1:trials) {#
    if((runif(1,0,1)^2 + runif(1,0,1)^2)<1) {#
      count = count + 1#
    }#
  }#
  return((count*4)/trials)#
}
montecarloPi(10)
montecarloPi(10000)
montecarloPi(10000000)
iDemandPi<-function(n=100){#
#Two runs will give you your x and y coordinate position#
randomX<-runif(n=n, min=-1, max=1)#
randomY<-runif(n=n, min=-1, max=1)#
#
#To get ourt circle part, x^2+y^2=1, and also values less than one will be within the circle#
insideCircle<-randomX^2+randomY^2<=1#
#Want to get # points in circle/# points in square * 4 (area of square)#
#Divide by n (all numbers) as all numbers will be somewhere within the square.#
#R reads TRUE and FALSE statements as 1 and 0.#
myPi=4*(sum(insideCircle)/n)#
#
#Now index by the logical statement.#
plot(x=randomX[insideCircle], y=randomY[insideCircle], pch=19)#
return(myPi)#
}
iDemandPi(10000)
randomX<-runif(n=10, min=-1, max=1)#
randomY<-runif(n=10, min=-1, max=1)
randomX
randomY
insideCircle<-randomX^2+randomY^2<=1
insideCircle
myPi=4*(sum(insideCircle)/10)
myPi
sum(insideCircle)
4*(sum(insideCircle)/10)
sum(insideCircle)/10)
sum(insideCircle)/10
randomX<-runif(n=100, min=-1, max=1)#
randomY<-runif(n=100, min=-1, max=1)#
#
#To get ourt circle part, x^2+y^2=1, and also values less than one will be within the circle#
insideCircle<-randomX^2+randomY^2<=1#
#Want to get # points in circle/# points in square * 4 (area of square)#
#Divide by n (all numbers) as all numbers will be somewhere within the square.#
#R reads TRUE and FALSE statements as 1 and 0.#
myPi=4*(sum(insideCircle)/10)
randomX<-runif(n=100, min=-1, max=1)#
randomY<-runif(n=100, min=-1, max=1)#
#
#To get ourt circle part, x^2+y^2=1, and also values less than one will be within the circle#
insideCircle<-randomX^2+randomY^2<=1#
#Want to get # points in circle/# points in square * 4 (area of square)#
#Divide by n (all numbers) as all numbers will be somewhere within the square.#
#R reads TRUE and FALSE statements as 1 and 0.#
myPi=4*(sum(insideCircle)/100)
myPi
sum(insideCircle)
rnorm(1, 5, 2)
brownian< -function(n=1000,plot=T,fun=rnorm) {#
	x<-cumsum(fun(n))#
	y<-cumsum(fun(n))#
	plot(x,y,type="l")#
	}#
brownian(fun=rnorm)
brownian< -function(n=1000,plot=T,fun=rnorm) {#
	x<-cumsum(fun(n))#
	y<-cumsum(fun(n))#
	plot(x,y,type="l")#
	}
brownian<- function(n=1000,plot=T,fun=rnorm) {#
	x<-cumsum(fun(n))#
	y<-cumsum(fun(n))#
	plot(x,y,type="l")#
	}#
brownian(fun=rnorm)
brownian<- function(n=1000,plot=T,fun=rnorm,df=1) {#
	x<-cumsum(fun(n,df))#
	y<-cumsum(fun(n,df))#
	plot(x,y,type="l")#
	}#
brownian(fun=rt)
brownian<- function(n=1000,plot=T,fun=rnorm) {#
	x<-cumsum(fun(n))#
	y<-cumsum(fun(n))#
	plot(x,y,type="l")#
	}#
brownian(fun=rnorm)
brownian<- function(n=100,plot=T,fun=rnorm) {#
	x<-cumsum(fun(n))#
	y<-cumsum(fun(n))#
	plot(x,y,type="l")#
	}#
brownian(fun=rnorm)
brownian<- function(n=100,plot=T,fun=rnorm) {#
	x<-cumsum(fun(n))#
	y<-cumsum(fun(n))#
	plot(x,y,type="p")#
	}#
brownian(fun=rnorm)
brownian<- function(n=100,plot=T,fun=rnorm) {#
	x<-cumsum(fun(n))#
	y<-cumsum(fun(n))#
	plot(x,y,type="b")#
	}#
brownian(fun=rnorm)
maturity <- 15#
simulation.length <- 10001#
dt <-  maturity/(simulation.length-1)#
#
timeline <- seq(0,maturity, dt)#
#
S0<-1#
r<-0.05#
mu<-0.1#
mu0<-0.2#
sigma<-0.2#
sigma0<-0.375#
#
f <- g <- g0 <- h <- h0 <- rep(0, times=simulation.length)#
g0[1] <- h0[1] <- g[1] <-  h[1] <- S0#
#
for(i in 2:simulation.length){#
 f[i] <- f[i-1]+sqrt(dt)*rnorm(1)#
 g[i] <- g[1]*exp((mu-(sigma^2)/2)*(i-1)*dt+sigma*f[i])#
 g0[i] <- g0[1]*exp(mu*(i-1)*dt)#
 h[i] <- h[1]*exp((mu0-sigma0^2/2)*(i-1)*dt+sigma0*f[i])#
 h0[i] <- h0[1]*exp(mu0*(i-1)*dt)#
}#
#
o_range <- range(f,g,g0,h,h0)#
#
plot(timeline,f, ylim=o_range, type="l", col="coral1")#
lines(timeline,g0, col="chartreuse3")#
lines(timeline,g, col="chartreuse2")#
lines(timeline,h, col="deepskyblue1")#
lines(timeline,h0, col="deepskyblue3")#
#
title(main="Geometric Brownian Motion trajectories", col.main="red", font.main=4)#
legend(1, o_range[2], c("mu = 0.2,  sigma = 0.375","mu = 0.1,  sigma = 0.2","Brownian motion"), cex=0.8, #
   col=c("deepskyblue1","chartreuse2","coral1"), pch=1, lty=1);
maturity <- 15#
simulation.length <- 10001#
dt <-  maturity/(simulation.length-1)#
#
timeline <- seq(0,maturity, dt)#
#
S0<-1#
r<-0.05#
mu<-0.1#
mu0<-0.2#
sigma<-0.8#
sigma0<-0.375#
#
f <- g <- g0 <- h <- h0 <- rep(0, times=simulation.length)#
g0[1] <- h0[1] <- g[1] <-  h[1] <- S0#
#
for(i in 2:simulation.length){#
 f[i] <- f[i-1]+sqrt(dt)*rnorm(1)#
 g[i] <- g[1]*exp((mu-(sigma^2)/2)*(i-1)*dt+sigma*f[i])#
 g0[i] <- g0[1]*exp(mu*(i-1)*dt)#
 h[i] <- h[1]*exp((mu0-sigma0^2/2)*(i-1)*dt+sigma0*f[i])#
 h0[i] <- h0[1]*exp(mu0*(i-1)*dt)#
}#
#
o_range <- range(f,g,g0,h,h0)#
#
plot(timeline,f, ylim=o_range, type="l", col="coral1")#
lines(timeline,g0, col="chartreuse3")#
lines(timeline,g, col="chartreuse2")#
lines(timeline,h, col="deepskyblue1")#
lines(timeline,h0, col="deepskyblue3")#
#
title(main="Geometric Brownian Motion trajectories", col.main="red", font.main=4)#
legend(1, o_range[2], c("mu = 0.2,  sigma = 0.375","mu = 0.1,  sigma = 0.2","Brownian motion"), cex=0.8, #
   col=c("deepskyblue1","chartreuse2","coral1"), pch=1, lty=1);
maturity <- 15#
simulation.length <- 10001#
dt <-  maturity/(simulation.length-1)#
#
timeline <- seq(0,maturity, dt)#
#
S0<-1#
r<-0.05#
mu<-0.1#
mu0<-0.2#
sigma<-0.8#
sigma0<-0.8#
#
f <- g <- g0 <- h <- h0 <- rep(0, times=simulation.length)#
g0[1] <- h0[1] <- g[1] <-  h[1] <- S0#
#
for(i in 2:simulation.length){#
 f[i] <- f[i-1]+sqrt(dt)*rnorm(1)#
 g[i] <- g[1]*exp((mu-(sigma^2)/2)*(i-1)*dt+sigma*f[i])#
 g0[i] <- g0[1]*exp(mu*(i-1)*dt)#
 h[i] <- h[1]*exp((mu0-sigma0^2/2)*(i-1)*dt+sigma0*f[i])#
 h0[i] <- h0[1]*exp(mu0*(i-1)*dt)#
}#
#
o_range <- range(f,g,g0,h,h0)#
#
plot(timeline,f, ylim=o_range, type="l", col="coral1")#
lines(timeline,g0, col="chartreuse3")#
lines(timeline,g, col="chartreuse2")#
lines(timeline,h, col="deepskyblue1")#
lines(timeline,h0, col="deepskyblue3")#
#
title(main="Geometric Brownian Motion trajectories", col.main="red", font.main=4)#
legend(1, o_range[2], c("mu = 0.2,  sigma = 0.375","mu = 0.1,  sigma = 0.2","Brownian motion"), cex=0.8, #
   col=c("deepskyblue1","chartreuse2","coral1"), pch=1, lty=1);
maturity <- 15#
simulation.length <- 10001#
dt <-  maturity/(simulation.length-1)#
#
timeline <- seq(0,maturity, dt)#
#
S0<-1#
r<-0.05#
mu<-0.1#
mu0<-0.2#
sigma<-0.1#
sigma0<-0.1#
#
f <- g <- g0 <- h <- h0 <- rep(0, times=simulation.length)#
g0[1] <- h0[1] <- g[1] <-  h[1] <- S0#
#
for(i in 2:simulation.length){#
 f[i] <- f[i-1]+sqrt(dt)*rnorm(1)#
 g[i] <- g[1]*exp((mu-(sigma^2)/2)*(i-1)*dt+sigma*f[i])#
 g0[i] <- g0[1]*exp(mu*(i-1)*dt)#
 h[i] <- h[1]*exp((mu0-sigma0^2/2)*(i-1)*dt+sigma0*f[i])#
 h0[i] <- h0[1]*exp(mu0*(i-1)*dt)#
}#
#
o_range <- range(f,g,g0,h,h0)#
#
plot(timeline,f, ylim=o_range, type="l", col="coral1")#
lines(timeline,g0, col="chartreuse3")#
lines(timeline,g, col="chartreuse2")#
lines(timeline,h, col="deepskyblue1")#
lines(timeline,h0, col="deepskyblue3")#
#
title(main="Geometric Brownian Motion trajectories", col.main="red", font.main=4)#
legend(1, o_range[2], c("mu = 0.2,  sigma = 0.375","mu = 0.1,  sigma = 0.2","Brownian motion"), cex=0.8, #
   col=c("deepskyblue1","chartreuse2","coral1"), pch=1, lty=1);
require(ape)
require(geiger)
requier(geiger)
require(geiger)
?geiger
?bd.tree
MyTree<-sim.bdtree(b=0.1, d=0.09, stop=c("taxa", "time"), n=100, t=4, seed = 0, extinct=TRUE)
plot(MyTree)
plot(MyTree, tiplabels=F)
plot(MyTree, tip.labels=F)
plot(MyTree, tip.label=F)
plot(MyTree, show.tip.label=F)
MyTree
str(MyTree)
MyTree$edge.length
nodelabels()
tiplabels()
Extant<-drop.extinct(MyTree)
plot(Extant)
drop.extinct
MyTree<-sim.bdtree(b=0.1, d=0.09, stop=c("taxa", "time"), n=50, t=4, seed = 0, extinct=TRUE)
MyTree<-sim.bdtree(b=0.1, d=0.09, stop=c("taxa", "time"), n=100, t=4, seed = 0, extinct=TRUE)
MyTree<-sim.bdtree(b=0.1, d=0.09, stop=c("taxa", "time"), n=50, t=4, seed = 0, extinct=TRUE)
plot(MyTree, show.tip.label=F)
?vcv
Traits<-sim.char(MyTree, 0.02, 100)
Traits
Traits<-sim.char(MyTree, 0.02, 1)
Traits
Traits2<-sim.char(MyTree, model="Brownian")
TraitsVCV<-vcv(MyTree, model="Brownian")
TraitsMul<-sim.char(MyTree, TraitsVCV, 1)
TraitsMul
TraitsLinear<-sim.char(MyTree, 0.02, 1)
TraitsLinear
class(TraitLinear)
class(TraitsLinear)
TraitsLinearV<-as.vector(TraitsLinear)
TraitsLinearV
rownames(TraitsLinear)
names(TraitsLinearV)<-rownames(TraitsLinear)
TraitsLinearV
?fitContinuous
BMTrait<-fitContinuous(MyTree, TraitsLinearV, model="BM")
BMTrait
OUTrait<-fitContinuous(MyTree, TraitsLinearV, model="OU")
library(png)
setwd("/Users/Home/Dropbox/Amherst/ResearchAssistant/BetsyFigs/Fall")#
#
#Replace the directory and file information with your info#
ima1 <- readPNG("A1unilateralmolarbitingCROP.png")
BData<-read.csv("Morph-Values-take4.csv", header=T)
attach(BData)
Set up the plot area#
quartz()#
plot(x_pw_psw, unim_ma, yaxs='i', xaxs='i', type='n', main="Unilateral Molar Biting", xlab="Palate Width / Skull Width", ylab="Palate Length / Skull Width")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#lim <- par()#
#rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(x_pw_psw, unim_ma, pch=OurSymbols[unclass(group)], cex=1.5)
quartz()#
plot(x_pw_psw, unim_ma, yaxs='i', xaxs='i', type='n', main="Unilateral Molar Biting", xlab="Palate Width / Skull Width", ylab="Palate Length / Skull Width")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(x_pw_psw, unim_ma, pch=OurSymbols[unclass(group)], cex=1.5)
Anoles<-read.csv("anolisData.csv", header=T, na.strings="?", rownames=1)
Anoles<-read.csv("anolisData.csv", header=T, na.strings="?", row.names=1)
setwd("/Users/Home/Dropbox/Amherst/Courses/SOURCE/2013-Fall/Week5_AdvancedPlotting")
Anoles<-read.csv("anolisData.csv", header=T, na.strings="?", row.names=1)
ima1 <- readPNG("ResponseSurface1.png")
attach(Anoles)#
#
str(Anoles)
quartz()#
plot(PCI_limbs, PCII_head, yaxs='i', xaxs='i', type='n', main="Unilateral Molar Biting", xlab="Palate Width / Skull Width", ylab="Palate Length / Skull Width")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(x_pw_psw, unim_ma, pch=OurSymbols[unclass(ecomorph)], cex=1.5)
quartz()#
plot(PCI_limbs, PCII_head, yaxs='i', xaxs='i', type='n', main="Unilateral Molar Biting", xlab="Palate Width / Skull Width", ylab="Palate Length / Skull Width")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(PCI_limbs, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)
quartz()#
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', main="Unilateral Molar Biting", xlab="Palate Width / Skull Width", ylab="Palate Length / Skull Width")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)
quartz()#
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', main="Unilateral Molar Biting", xlab="Palate Width / Skull Width", ylab="Palate Length / Skull Width")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(group), bty="n", pch=OurSymbols)
quartz()#
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,6), ylim=c(-7,7), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5), ylim=c(-7,6), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(ecomorph), bty="n", pch=OurSymbols)
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(SVL, PCII_head,  type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(ecomorph), bty="n", pch=OurSymbols)
pdf("TEST.pdf", width=20, height=10)#
#s for 'square plot'#
par(pty="s") #
#
quartz()#
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(ecomorph), bty="n", pch=OurSymbols)#
dev.off()
pdf("TEST.pdf", width=20, height=10)#
#s for 'square plot'#
par(pty="s") #
#
#quartz()#
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(ecomorph), bty="n", pch=OurSymbols)#
dev.off()
pdf("TEST.pdf", width=10, height=10)#
#s for 'square plot'#
par(pty="s") #
#
#quartz()#
plot(SVL, PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
lim <- par()#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
OurSymbols<-c(0, 1, 3, 17)#
#
points(SVL, PCII_head, pch=OurSymbols[unclass(ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(ecomorph), bty="n", pch=OurSymbols)#
dev.off()
Force<-read.table("Force_Displacement.txt", header=T, sep="\t")
head(Force)
plot(Force$Displacement.um, Force$Force.mn)
plot(Force$Displacement.um, Force$Force.mn)
plot(Force$Displacement.um, Force$Force.mn, type='l')
par(mfrow=c(1,3))#
#
plot(Force$Displacement.um, Force$Force.mn, type='l')#
plot(Force$Displacement.um, Force$Force.mn, type='b')#
plot(Force$Displacement.um, Force$Force.mn, type='p')
par(mfrow=c(2,2))#
plot(Force$Displacement.um, Force$Force.mn, type='l')#
plot(Force$Displacement.um, Force$Force.mn, type='b')#
plot(Force$Displacement.um, Force$Force.mn, type='p')#
plot(Force$Displacement.um, Force$Force.mn, type='n')
lines(Force$Displacement.um, Force$Force.mn)
Force<-read.table("Force_Displacement2.txt", header=T, sep="\t")
Force<-read.table("Force_Displacement_2.txt", header=T, sep="\t")
par(mfrow=c(2,2))#
plot(Force$Displacement.um, Force$Force.mn, type='l')#
plot(Force$Displacement.um, Force$Force.mn, type='b')#
plot(Force$Displacement.um, Force$Force.mn, type='p')#
plot(Force$Displacement.um, Force$Force.mn, type='n')#
lines(Force$Displacement.um, Force$Force.mn)
Force<-read.table("Force_Displacement_2.txt", header=T, sep="\t")
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='l')
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='l')
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='l')
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='l')
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='l')#
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='b')#
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='p')#
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='n')#
lines(Force$Displacement.um, Force$Force.Plastic.A.mn, col="black")#
lines(Force$Displacement.um, Force$Force.Plastic.B.mn, col="red")
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='l')#
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='b')#
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='p')#
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='n')#
lines(Force$Displacement.um, Force$Force.Plastic.B.mn, col="red")#
lines(Force$Displacement.um, Force$Force.Plastic.A.mn, col="black")
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='l')#
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='b')#
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='p')#
plot(Force$Displacement.um, Force$Force.Plastic.B.mn, type='n')#
lines(Force$Displacement.um, Force$Force.Plastic.B.mn, col="red")#
lines(Force$Displacement.um, Force$Force.Plastic.A.mn, col="black")
Force<-read.table("Force_Displacement_2.txt", header=T, sep="\t")
par(mfrow=c(1,1))
plot(Force$Displacement.um, Force$Force.Plastic.C.mn, type='n')#
lines(Force$Displacement.um, Force$Force.Plastic.B.mn, col="red")#
lines(Force$Displacement.um, Force$Force.Plastic.A.mn, col="black")#
lines(Force$Displacement.um, Force$Force.Plastic.C.mn, col="blue")
plot(Force$Displacement.um, Force$Force.Plastic.C.mn, type='n', ylim=c(0,55))
lines(Force$Displacement.um, Force$Force.Plastic.B.mn, col="red")#
lines(Force$Displacement.um, Force$Force.Plastic.A.mn, col="black")#
lines(Force$Displacement.um, Force$Force.Plastic.C.mn, col="blue")
plot(Force$Displacement.um, Force$Force.Plastic.C.mn, type='n', ylim=c(0,55), xlab="Displacement (um)", ylab="Force (mn)")#
lines(Force$Displacement.um, Force$Force.Plastic.B.mn, col="red")#
lines(Force$Displacement.um, Force$Force.Plastic.A.mn, col="black")#
lines(Force$Displacement.um, Force$Force.Plastic.C.mn, col="blue")
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='l', lwd=2)
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='p', cex=1.5, pch=19)
detach(Anoles)
plot(Anoles$SVL, Anoles$PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 1, 3, 17)#
#
points(Anoles$SVL, Anoles$PCII_head, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(Anoles$SVL, Anoles$PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 1, 3, 17)#
#
points(Anoles$SVL, Anoles$PCII_head, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
levels(Anoles$ecomorph)
quartz()#
plot(Anoles$SVL, Anoles$PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 3, 4, 15, 17, 19)#
#
points(Anoles$SVL, Anoles$PCII_head, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(Anoles$SVL, Anoles$PCII_head, yaxs='i', xaxs='i', type='n', xlim=c(3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima1, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 15, 17, 18, 19, 3)#
#
points(Anoles$SVL, Anoles$PCII_head, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='b', lty=2)
plot(Force$Displacement.um, Force$Force.Plastic.A.mn, type='b', lty=2)
ima2 <- readPNG("ResponseSurface2.png")#
#
quartz()#
plot(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, yaxs='i', xaxs='i', type='n', xlim=c(-3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima2, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 15, 17, 18, 19, 3)#
#
points(Anoles$SVL, Anoles$PCII_head, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, yaxs='i', xaxs='i', type='n', xlim=c(-3,5.5), ylim=c(-7,5), main="Anole Morphospace", xlab="SVL", ylab="Head PC2")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima2, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 15, 17, 18, 19, 3)#
#
points(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, yaxs='i', xaxs='i', type='n', xlim=c(-4,4), ylim=c(-7,5), main="Anole Morphospace", xlab="Tail PC3", ylab="Lamella PC4")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima2, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 15, 17, 18, 19, 3)#
#
points(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, yaxs='i', xaxs='i', type='n', main="Anole Morphospace", xlab="Tail PC3", ylab="Lamella PC4")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima2, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 15, 17, 18, 19, 3)#
#
points(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
plot(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, yaxs='i', xaxs='i', type='n', ylim=c(-4,4), main="Anole Morphospace", xlab="Tail PC3", ylab="Lamella PC4")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima2, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 15, 17, 18, 19, 3)#
#
points(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, yaxs='i', xaxs='i', type='n', ylim=c(-4,4), main="Anole Morphospace", xlab="Tail PC3", ylab="Lamella PC4")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima2, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 15, 17, 18, 19, 3)#
#
points(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
quartz()#
plot(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, yaxs='i', xaxs='i', type='n', xlim=c(-5,4), ylim=c(-4,4), main="Anole Morphospace", xlab="Tail PC3", ylab="Lamella PC4")#
#
#Get the plot information so the image will fill the plot box, and draw it#
#Set the limits of your plot#
lim <- par()#
#Tell R what those limits are - Each margin has it's own limits - There are four margins.#
rasterImage(ima2, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])#
#
#As Moira did last week with the colours, we are going to define the symobols we want.#
OurSymbols<-c(0, 2, 15, 17, 18, 19, 3)#
#
points(Anoles$PCIII_padwidth_vs_tail, Anoles$PCIV_lamella_num, pch=OurSymbols[unclass(Anoles$ecomorph)], cex=1.5)#
legend("bottomright", legend=levels(Anoles$ecomorph), bty="n", pch=OurSymbols)
